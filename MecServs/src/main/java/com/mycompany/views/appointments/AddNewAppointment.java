/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.views.appointments;

import com.mycompany.dao.AgendamentoDao;
import com.mycompany.dao.ServicoDao;
import com.mycompany.impl.AgendamentoDaoImpl;
import com.mycompany.impl.CarroDaoImpl;
import com.mycompany.impl.MotoDaoImpl;
import com.mycompany.impl.ServicoDaoImpl;
import com.mycompany.impl.UtilDaoImpl;
import com.mycompany.mecservs.Dashboard;
import com.mycompany.models.Agendamento;
import com.mycompany.models.Servico;
import static com.mycompany.views.vehicles.AddNewVehicle.formatarInputs;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Sirval
 */
public class AddNewAppointment extends javax.swing.JPanel {

      private String placaRegex = "^[A-Z]{3}[0-9][A-Z0-9][0-9]{2}$";
      private List<String> veiculosCadastrados;
    
    public AddNewAppointment() {
        initComponents();
        loadServices();
        loadVehicles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnVoltar = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnCadastrar = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputPrazo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        message = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        inputVeiculo = new javax.swing.JTextField();
        inputServicos = new javax.swing.JComboBox<>();

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        jLabel1.setText("Servico");

        jLabel2.setText("Prazo (em dias úteis)");

        inputPrazo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "7", "15", "30", "60", "90" }));
        inputPrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputPrazoActionPerformed(evt);
            }
        });
        inputPrazo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                inputPrazoPropertyChange(evt);
            }
        });

        jLabel7.setText("Veículo  (Placa)");

        message.setText("Cadastrar um Novo Agendamento");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/placeholder.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputVeiculo)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                    .addComponent(inputPrazo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(inputServicos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputServicos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputPrazo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        Dashboard.ShowJPanel(new AllAppointments());
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        inputVeiculo.setText(formatarInputs(inputVeiculo.getText()));
        if(checkFields()){
        Agendamento newAgendamento = new Agendamento();
         
       
        String veiculo =formatarInputs(inputVeiculo.getText());
        String servico = formatarInputs(inputServicos.getItemAt(inputServicos.getSelectedIndex()));
        Integer prazo  = Integer.valueOf(inputPrazo.getItemAt(inputPrazo.getSelectedIndex()));
        
        Date dataAgendamento = new Date();
       
          // Usando Calendar para somar os dias
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(dataAgendamento); // Define a data atual
        calendar.add(Calendar.DAY_OF_MONTH, prazo); // Soma os dias

        Date dataDeEntrega = calendar.getTime();

        //Setar valores
        newAgendamento.setVeiculo(veiculo);
        newAgendamento.setServico(servico);
        newAgendamento.setDataAgendamento(dataAgendamento);
        newAgendamento.setDataDeEntrega(dataDeEntrega);
        
        
        //Limpando os campos
        cleanAllFields();
        
        //Salvando Valores
        try{
            AgendamentoDao dao = new AgendamentoDaoImpl();
            dao.registrar(newAgendamento);
            JOptionPane.showMessageDialog(null,"Cadastro realizado com sucesso!", "Confirmação",JOptionPane.INFORMATION_MESSAGE);
        }catch(SQLIntegrityConstraintViolationException e){

            JOptionPane.showMessageDialog(null, "Erro ao realizar o cadastro! Só é permito que cada veiculo faça apenas um serviço.",   "Erro", JOptionPane.ERROR_MESSAGE);
            inputVeiculo.requestFocus(); 
        }
        catch(Exception e){
            System.out.println("Nao foi possivel cadastrar o novo agendamento no banco." + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao realizar o cadastro! Por favor, tente novamente.",   "Erro", JOptionPane.ERROR_MESSAGE);
        }
       }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void inputPrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputPrazoActionPerformed

    }//GEN-LAST:event_inputPrazoActionPerformed

    private void inputPrazoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_inputPrazoPropertyChange

    }//GEN-LAST:event_inputPrazoPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnCadastrar;
    private javax.swing.JToggleButton btnVoltar;
    private javax.swing.JComboBox<String> inputPrazo;
    private javax.swing.JComboBox<String> inputServicos;
    private javax.swing.JTextField inputVeiculo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel message;
    // End of variables declaration//GEN-END:variables

    private boolean checkFields() {
        if (inputVeiculo.getText().isEmpty()) {
         JOptionPane.showMessageDialog(null, "O campo de placa não pode estar vazio.", "Erro", JOptionPane.ERROR_MESSAGE);
         inputVeiculo.requestFocus(); // Foca no campo de placa para correção
         return false;
         } 
        if(!inputVeiculo.getText().matches(placaRegex)) {
           JOptionPane.showMessageDialog(null, "Formato de placa inválido. Use o formato ABC1234 ou ABC1D23.", "Erro", JOptionPane.ERROR_MESSAGE);
           inputVeiculo.requestFocus();
           return false;
        }
        if(!hasVehicle()){
            JOptionPane.showMessageDialog(null, "Veículo não encontrado, cadastre-o ou verifique a placa cadastrada.", "Erro", JOptionPane.ERROR_MESSAGE);
           inputVeiculo.requestFocus();
           return false;
        }
        if(inputServicos.getItemAt(0) == null){
         JOptionPane.showMessageDialog(null, "Cadastre um novo serviço.", "Erro", JOptionPane.ERROR_MESSAGE);
         inputServicos.requestFocus(); // Foca no campo de placa para correção
         return false;
        }
       
       return true;
    }
    
    private void loadServices(){
        if(ServicoDaoImpl.servicosDisponiveis != null){
            ServicoDaoImpl.servicosDisponiveis.forEach((u)->{
                inputServicos.addItem(u.getNome());
            }); 
        }    
    }

    private void cleanAllFields() {
        inputVeiculo.setText("");
        inputServicos.setSelectedIndex(0);
        inputPrazo.setSelectedIndex(0);
    }

    private void loadVehicles() {
        veiculosCadastrados = new ArrayList<>();
        if( CarroDaoImpl.carrosDisponiveis != null){
            CarroDaoImpl.carrosDisponiveis.forEach((u)->{
                veiculosCadastrados.add(u.getPlaca());
            });
        }
      if( MotoDaoImpl.motosDisponiveis != null){
          MotoDaoImpl.motosDisponiveis.forEach((u)->{
                veiculosCadastrados.add(u.getPlaca());
            });
      }
      if(UtilDaoImpl.utilsDisponiveis != null){
           UtilDaoImpl.utilsDisponiveis.forEach((u)->{
                veiculosCadastrados.add(u.getPlaca());
            });
      }
    }
    
    private boolean hasVehicle(){
        boolean hasVehicle = false;
        if(this.veiculosCadastrados != null){
           for(String s:this.veiculosCadastrados){
               if(s.equals(inputVeiculo.getText())){
                 hasVehicle = true;  
               }
           }
        }
        return hasVehicle;
    }
}
