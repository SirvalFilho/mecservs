/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.views.appointments;

import com.mycompany.impl.AgendamentoDaoImpl;
import com.mycompany.models.Agendamento;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sirval
 */
public class TableAllScheduled extends javax.swing.JPanel {

    AgendamentoDaoImpl agendamentos = new AgendamentoDaoImpl();
    
    public TableAllScheduled() {
        initComponents();
        initStyles();
        loadScheduled();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableContent = new javax.swing.JTable();

        tableContent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Veículo", "Serviço", "DataAgendamento", "DataDeEntrega", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableContent);
        if (tableContent.getColumnModel().getColumnCount() > 0) {
            tableContent.getColumnModel().getColumn(0).setResizable(false);
            tableContent.getColumnModel().getColumn(1).setResizable(false);
            tableContent.getColumnModel().getColumn(2).setResizable(false);
            tableContent.getColumnModel().getColumn(3).setResizable(false);
            tableContent.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableContent;
    // End of variables declaration//GEN-END:variables

    private void initStyles() {
      //Alinhar o texto ao centro
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        
        // Aplica o alinhamento nas colunas
        for (int i = 0; i < tableContent.getColumnCount(); i++) {
            tableContent.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
}

    private void loadScheduled() {
        try {
            List<Agendamento> agendamento = this.agendamentos.listarTodosAgendados();
            if(agendamentos != null){
                DefaultTableModel model = (DefaultTableModel) tableContent.getModel();
                agendamento.forEach((u)->model.addRow(new Object[]{u.getVeiculo(),u.getServico(),formateDate(u.getDataAgendamento()),formateDate(u.getDataDeEntrega()),u.getStatus()}));      
            }
            
            
        } catch (Exception ex) {
            Logger.getLogger(TableAllScheduled.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private Object formateDate(Date date) {
       SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String formattedDate = formatter.format(date);
        return formattedDate;
    }
}
